from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import pandas as pd


y_scaler = StandardScaler()
y_train_scaled = y_scaler.fit_transform(y_train.reshape(-1,1)).ravel()

models = {
    "Linear Regression": LinearRegression(),
    "SVR Linear": SVR(kernel='linear', C=1000),
    "SVR Polynomial": SVR(kernel='poly', degree=3, C=1000),
    "SVR RBF": SVR(kernel='rbf', C=1000, gamma=0.1)
}

results = []

for name, model in models.items():
    if name == "Linear Regression":
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
    else:
        model.fit(X_train, y_train_scaled)
        y_pred_scaled = model.predict(X_test)
        y_pred = y_scaler.inverse_transform(y_pred_scaled.reshape(-1,1)).ravel()

    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    results.append([name, mse, r2])


    plt.figure(figsize=(5,4))
    plt.scatter(y_test, y_pred, alpha=0.6)
    plt.xlabel("Actual Price")
    plt.ylabel("Predicted Price")
    plt.title(f"Actual vs Predicted - {name}")
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    plt.show()

results_df = pd.DataFrame(results, columns=["Model", "MSE", "RÂ² Score"])
display(results_df)
